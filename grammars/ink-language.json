{
  "name": "ink",
  "scopeName": "source.ink",
  "fileTypes": [
    "ink",
    "ink2"
  ],
  "uuid": "5a0f60ba-87b8-4fa9-854c-6bf41f74bd98",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "match": "^\\s*(={2,})\\s*(function)?\\s*(\\w+)\\s*(\\([^)]*\\))?\\s*(={1,})?",
      "captures": {
        "1": {
          "name": "markup.punctuation"
        },
        "2": {
          "name": "keyword.function"
        },
        "3": {
          "name": "entity.name.knot"
        },
        "4": {
          "name": "variable.parameter"
        },
        "5": {
          "name": "markup.punctuation"
        }
      },
      "name": "meta.knot.declaration"
    },
    {
      "match": "^\\s*(=)\\s*(\\w+)\\s*(\\([^)\\n]*\\))?\\s*$",
      "captures": {
        "1": {
          "name": "markup.punctuation"
        },
        "2": {
          "name": "keyword.function"
        },
        "3": {
          "name": "entity.name.knot"
        },
        "4": {
          "name": "variable.parameter"
        },
        "5": {
          "name": "markup.punctuation"
        }
      },
      "name": "meta.stitch.declaration"
    },
    {
      "include": "#choice"
    },
    {
      "include": "#gather"
    },
    {
      "include": "#statements"
    },
    {
      "include": "#tags"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "begin": "/\\*\\*",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.json"
            }
          },
          "end": "\\*/",
          "name": "comment.block.documentation.json"
        },
        {
          "begin": "/\\*",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.json"
            }
          },
          "end": "\\*/",
          "name": "comment.block.json"
        },
        {
          "captures": {
            "1": {
              "name": "punctuation.definition.comment.json"
            }
          },
          "match": "(//).*$\\n?",
          "name": "comment.line.double-slash.js"
        }
      ]
    },
    "TODO": {
      "match": "^\\s*(?:(TODO\\s*:)|(TODO\\b))\\s*(.*)",
      "captures": {
        "1": {
          "name": "comment.todo.TODO"
        },
        "2": {
          "name": "comment.todo.TODO"
        }
      },
      "end": "$\\n?",
      "name": "comment.todo"
    },
    "globalVAR": {
      "begin": "^\\s*((VAR|CONST)\\s*(\\w+))\\s*",
      "beginCaptures": {
        "1": {
          "name": "meta.variable.declaration"
        },
        "2": {
          "name": "storage"
        },
        "3": {
          "name": "entity.name.variable"
        }
      },
      "end": "$\\n?",
      "name": "meta.variable.assignment"
    },
    "choice": {
      "begin": "^\\s*((?:[\\*\\+]\\s?)+)\\s*(\\(\\s*(\\w+)\\s*\\))?",
      "beginCaptures": {
        "1": {
          "name": "keyword.operator.weaveBullet.choice"
        },
        "2": {
          "name": "meta.label"
        },
        "3": {
          "name": "entity.name.label"
        }
      },
      "end": "$\\n?",
      "name": "choice",
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "match": "(\\[)([^\\]]*)(\\])",
          "captures": {
            "1": {
              "name": "keyword.operator.weaveBracket"
            },
            "2": {
              "name": "string.content",
              "patterns": [
                {
                "include": "#mixedContent"
                }
              ]
            },
            "3": {
              "name": "keyword.operator.weaveBracket"
            }
          }
        },
        {
          "include": "#divert"
        },
        {
          "include": "#mixedContent"
        }
      ]
    },
    "gather": {
      "match": "^\\s*((?:-\\s*)+)(?!>)(\\(\\s*(\\w+)\\s*\\))?",
      "captures": {
        "1": {
          "name": "keyword.operator.weaveBullet.gather"
        },
        "2": {
          "name": "meta.label"
        },
        "3": {
          "name": "entity.name.label"
        }
      },
      "name": "meta.gather"
    },
    "multiLineLogic": {
      "begin": "^\\s*(\\{)([\\w_\\s\\*\\/\\-\\+\\&\\|\\%\\<\\>\\.\\(\\)]+(:))?(?=[^}]+$)",
      "beginCaptures": {
        "0": {
          "name": "keyword.operator.logic"
        },
        "1": {
          "name": "keyword.operator.logic"
        },
        "2": {
          "name": "keyword.operator.logic"
        },
        "3": {
          "name": "keyword.operator.logic"
        }
      },
      "end": "(\\})",
      "endCaptures": {
        "1": {
          "name": "keyword.operator.logic"
        }
      },
      "contentName": "meta.multilineLogicInner",
      "name": "meta.multilineLogic",
      "patterns": [
        {
          "match": "^\\s*else\\s*\\:",
          "name": "conditional.else"
        },
        {
          "begin": "^\\s*(-)\\s?[^:]+(:)",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator"
            },
            "2": {
              "name": "keyword.operator"
            }
          },
          "end": "$\\n?",
          "name": "conditional.clause",
          "patterns": [
            {
              "include": "#mixedContent"
            },
            {
              "include": "#choice"
            },
            {
              "include": "#gather"
          }
          ]
        },
        {
          "include": "#statements"
        },
        {
          "include": "#choice"
        },
        {
          "include": "#gather"
        },
        {
          "include": "#mixedContent"
        }
      ]
    },
    "inlineConditional": {
      "begin": "(\\{)([^:\\|\\}]+:)",
      "beginCaptures": {
        "1": {
          "name": "keyword.operator.inlineLogic.inlineConditionalStart"
         },
        "2": {
          "name": "keyword.operator.inlineLogic"
          }
      },
      "end": "(\\})",
      "endCaptures": {
        "1": {
          "name": "keyword.operator.inlineLogic.inlineConditionalEnd"
        }
      },
      "name": "entity.inlineConditional",
      "patterns": [
        {
          "match": "\\|",
          "name": "keyword.operator.inlineConditionalBranchSeparator"
        },
        {
          "include": "#mixedContent"
        }
      ]
    },
    "inlineSequence": {
      "begin": "(\\{)\\s*(~|&|!|\\$)?(?=([^\\|]*\\|(?!\\|)[^\\}]*)\\})",
      "beginCaptures": {
        "1": {
          "name": "keyword.operator.inlineLogic.inlineSequenceStart"
        },
        "2": {
          "name": "keyword.operator.inlineLogic.inlineSequenceTypeChar"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "keyword.operator.inlineLogic.inlineSequenceEnd"
        }
      },
      "name": "entity.inlineSequence",
      "patterns": [
        {
          "match": "\\|(?!\\|)",
          "name": "keyword.operator.inlineLogic.inlineSequenceSeparator"
        },
        {
          "include": "#mixedContent"
        }
      ]
    },
    "inlineLogic": {
      "begin": "(\\{)",
      "beginCaptures": {
        "1": {
          "name": "keyword.operator.inlineLogic.inlineLogicStart"
        }
      },
      "end": "(\\})",
      "endCaptures": {
        "1": {
          "name": "keyword.operator.inlineLogic.inlineLogicEnd"
        }
      },
      "name": "meta.logic"
    },
    "logicLine": {
      "match": "\\s*(~)(\\s*.*)$",
      "captures": {
        "1": {
          "name": "meta.logic"
          },
        "2": {
          "name": "meta.logic",
          "patterns": [
              {
                  "match": "(\"[^\"]*\")",
                  "name": "string.ink"
              }
          ]
        }
      }
    },
    "divert": {
      "match": "(->|<-)\\s*((?:(DONE)|(END)|(\\w+))(?:\\s*\\.\\s*(?:\\w+))*\\s*(?:\\([^\\)]+\\))?)?",
      "name": "meta.divert",
      "captures": {
        "1": {
          "name": "keyword.operator.divert"
        },
        "3": {
          "name": "keyword.done"
        },
        "4": {
          "name": "keyword.end"
        },
        "5": {
          "name": "variable.divertTarget"
        }
      }
    },
    "mixedContent": {
      "patterns": [
        {
          "include": "#inlineConditional"
        },
        {
          "include": "#inlineSequence"
        },
        {
          "include": "#inlineLogic"
        },
        {
          "include": "#divert"
        },
        {
          "match": "<>",
          "name": "constant.glue"
        },
        {
          "include": "text.html.basic"
        }
      ]
    },
    "statements": {
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#TODO"
        },
        {
          "include": "#globalVAR"
        },
        {
          "include": "#choice"
        },
        {
          "include": "#gather"
        },
        {
          "include": "#multiLineLogic"
        },
        {
          "include": "#endOfSection"
        },
        {
          "include": "#logicLine"
        },
        {
          "include": "#mixedContent"
        }
      ]
    },
    "tags": {
      "patterns": [
        {
          "begin": "((?<!\\\\)\\#)",
          "end": "$",
          "name": "string.tag.ink string.unquoted.ink",
          "patterns": [
            {
              "include": "#comments"
            }
          ]
        }
      ]
    }
  }
}
